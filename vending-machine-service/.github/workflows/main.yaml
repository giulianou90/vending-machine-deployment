name: Build and deploy beverage API to ECS

on:
  workflow_dispatch:
  push:
    branches: [chore/trigger-deploy, uat, master]

env:
  NAME: vending-machine
  REPOSITORY: vending-machine/app
  ACCOUNT_ID: 483127353410
  GITHUB_ACTIONS_ROLE_NAME: ops-github-actions

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Set environment based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENV=stg" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
            echo "ENV=uat" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "ENV=prd" >> $GITHUB_ENV
          else
            echo "ENV=unknown" >> $GITHUB_ENV
          fi

      - name: Assume CICD AWS IAM Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.ACCOUNT_ID}}:role/${{env.GITHUB_ACTIONS_ROLE_NAME}}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get commit hash
        id: commit
        uses: prompt/actions-commit-hash@v3
        with:
          commit: ${{ github.sha }}

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t ${{env.REPOSITORY}} .
          docker tag ${{env.REPOSITORY}} ${{env.ECR_REGISTRY}}/${{env.REPOSITORY}}:${{env.ENV}}-${{ steps.commit.outputs.short }}
          docker tag ${{env.REPOSITORY}} ${{env.ECR_REGISTRY}}/${{env.REPOSITORY}}:${{env.ENV}}-latest
          docker push ${{env.ECR_REGISTRY}}/${{env.REPOSITORY}}:${{env.ENV}}-latest
          docker push ${{env.ECR_REGISTRY}}/${{env.REPOSITORY}}:${{env.ENV}}-${{ steps.commit.outputs.short }}

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster ${{env.NAME}}-cluster-ecs-${{env.ENV}} --service ${{env.NAME}}-${{env.ENV}} --force-new-deployment
